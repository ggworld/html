<!DOCTYPE html>
<html>
<head>
    <title>SQLite WASM Demo</title>
</head>
<body>
    <script src="node_modules/sql.js/dist/sql-wasm.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/speech-commands"></script>
    <h1>Enter Location Details</h1>
    <label>Place: <input type="text" id="name" required></label><br>
    <label>Area: <input type="email" id="email" required></label><br>
    <label>Cordinate: <input type="tel" id="phone" required></label><br>
    <button onclick="startRecording()">Start Recording Comment</button>
    <button onclick="stopRecording()" disabled id="stopButton">Stop Recording</button><br>
    <button onclick="addRecord()" id="addButton" disabled>Add Record</button><br><br>
    <button onclick="downloadDB()">Download Database</button>
    <script>
        config = {
                locateFile: filename => `node_modules/sql.js/dist/${filename}`
        };
        let db;
        let mediaRecorder;
        let audioChunks = [];
        let currentCommentAudio;
        let recognition;
        let currentCommentTranscript = '';

        // Load the SQLite module
        initSqlJs(config).then(SQL => {
          db = new SQL.Database();
          db.run("CREATE TABLE IF NOT EXISTS people (name TEXT, email TEXT, phone TEXT, comment_audio BLOB, comment_text TEXT);");
        });

        function startRecording() {
            recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
            recognition.continuous = true;
            recognition.interimResults = true;
            recognition.onresult = function(event) {
                for (let i = event.resultIndex; i < event.results.length; ++i) {
                    if (event.results[i].isFinal) {
                        currentCommentTranscript += event.results[i][0].transcript;
                    }
                }
            };
            recognition.start();

            navigator.mediaDevices.getUserMedia({ audio: true })
            .then(stream => {
                mediaRecorder = new MediaRecorder(stream);
                document.getElementById('stopButton').disabled = false;

                mediaRecorder.ondataavailable = event => {
                  audioChunks.push(event.data);
                };

                mediaRecorder.onstop = () => {
                  const audioBlob = new Blob(audioChunks, { 'type': 'audio/wav' });
                  audioChunks = [];

                  // Convert the Blob to a Base64 string
                  const reader = new FileReader();
                  reader.readAsDataURL(audioBlob);
                  reader.onloadend = () => {
                    currentCommentAudio = reader.result;
                    document.getElementById('addButton').disabled = false; // Enable the add record button
                  };
                };

                mediaRecorder.start();
            });
        }

        function stopRecording() {
            recognition.stop();
            mediaRecorder.stop();
            document.getElementById('stopButton').disabled = true;
        }

        function addRecord() {
          const nameField = document.getElementById('name');
          const emailField = document.getElementById('email');
          const phoneField = document.getElementById('phone');

          db.run("INSERT INTO people (name, email, phone, comment_audio, comment_text) VALUES (?, ?, ?, ?, ?);",
                 [nameField.value, emailField.value, phoneField.value, currentCommentAudio, currentCommentTranscript]);

          // Clear the input fields and the currentComment variables after adding
          nameField.value = '';
          emailField.value = '';
          phoneField.value = '';
          currentCommentAudio = null;
          currentCommentTranscript = '';
          document.getElementById('addButton').disabled = true; // Disable the add record button
        }

        function downloadDB() {
          const data = db.export();
          const blob = new Blob([data], { type: 'application/octet-stream' });
          const url = window.URL.createObjectURL(blob);
          const a = document.createElement("a");
          a.href = url;
          a.download = "database.sqlite";
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
        }
    </script>
</body>
</html>
